; This is an example configuration for training machine translation.  It is an
; INI file with few added syntanctic restrictions.
;
; Names in suqare brackest refer to objects in the program. With the exception
; of the [main] block, all of them will be instantiated as objects.
;
; The field values can be of several types:
;
;   * None - interpreted as Python None
;   * True / False - interpreted as boolean values
;   * integers
;   * floating point numbers
;   * python types (fully defined with module name)
;   * references to other objects in the configuration, closed in <>
;   * strings (if it does not match any other pattern)
;   * tuples of the previous enclosed in brackets
;   * list of the previous, enclosed in square brackets, comma-separated
;
; The vocabularies are handeled in a special way. If the vocabularies source is
; defined in the [main] (a dataset object) a dictionary that maps the language
; code to the vocaburies is created. Later, if any other block has a field
; called 'vocabulary', and its value is a known language code, the vocabulary
; form the dictionary is used. Vocabularies can be also defined as objects
; in the INI file and can be referenced using the <> notation.
;

[main]
; The main block contains the mandatory fields for running and experiment.
name=translation
output=experiments/$TIME-test
batch_size=128
epochs=10
encoders=[<encoder>]
decoder=<decoder>
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runner=<runner>
evaluation=[evaluation.bleu_1,evaluation.bleu_4]

[train_data]
; This is definition of the training data object. Notice that language are
; defined here, because they are used identifiers while preparing vocabularies.
; Dataset is not a standard class, it treats the __init__ methods arguements as
; a dictionary, therefore the data series names can be any strings.
class=dataset.Dataset
source=data/train.tc.en
source_lng=en
target=data/train.tc.de
target_lng=de

[val_data]
; Validation data, the languages are not necessary here, encoders and decoder
; acces the data series via the string identifiers defined here.
class=dataset.Dataset
source=data/val.tc.en
target=data/val.tc.de

[encoder_vocabulary]
class=vocabulary.from_datasets
datasets=[<train_data>]
series_ids=[source]
max_size=25000

[encoder]
; This defines the sentence encoder object. All compulsory arguments from the
; __init__ methods must be defined in this block. The additional arguments may
; be defines, if they are not, the default value from the __init__ method is
; used. Notice the vocabulary is aquired via the language string.
class=sentence_encoder.SentenceEncoder
rnn_size=256
max_input_len=20
embedding_size=200
dropout_keep_p=0.5
attention_type=decoding_function.Attention
data_id=source
vocabulary=<encoder_vocabulary>

[decoder_vocabulary]
class=vocabulary.from_datasets
datasets=[<train_data>]
series_ids=[target]
max_size=25000

[decoder]
class=decoder.Decoder
encoders=[<encoder>]
rnn_size=256
embedding_size=256
use_attention=True
dropout_keep_p=0.5
data_id=target
vocabulary=<decoder_vocabulary>

[trainer]
; This block just fills the arguments of the trainer __init__ method.
class=cross_entropy_trainer.CrossEntropyTrainer
decoder=<decoder>
l2_regularization=1.0e-8

[runner]
; This is block is used for both validation and testing to run the model on
; given dataset.
class=runner.GreedyRunner
decoder=<decoder>
batch_size=256
postprocess=None
